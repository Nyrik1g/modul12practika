using System;
using System.Collections.Generic;
using System.Linq;

namespace EventBookingSystem
{
    public class Event
    {
        public int ID { get; set; }
        public string Title { get; set; }
        public DateTime Date { get; set; }
        public string Location { get; set; }
    }

    public class User
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public string Role { get; set; } // "Guest", "User", "Admin"
    }

    public class Booking
    {
        public int ID { get; set; }
        public User User { get; set; }
        public Event Event { get; set; }
        public string Status { get; set; } // "Active", "Cancelled"
    }

    class Program
    {
        static List<Event> events = new List<Event>();
        static List<User> users = new List<User>();
        static List<Booking> bookings = new List<Booking>();
        static int bookingCounter = 1;

        static void Main(string[] args)
        {
            SeedData();

            Console.WriteLine("Введите ваше имя:");
            string userName = Console.ReadLine();
            User currentUser = users.FirstOrDefault(u => u.Name == userName);

            if (currentUser == null)
            {
                Console.WriteLine("Пользователь не найден!");
                return;
            }

            Console.WriteLine($"Добро пожаловать, {currentUser.Name}! Ваша роль: {currentUser.Role}");

            bool exit = false;
            while (!exit)
            {
                Console.WriteLine("\n1. Просмотр мероприятий");
                Console.WriteLine("2. Забронировать мероприятие");
                Console.WriteLine("3. Отменить бронирование");
                if (currentUser.Role == "Admin")
                {
                    Console.WriteLine("4. Добавить мероприятие");
                    Console.WriteLine("5. Редактировать мероприятие");
                    Console.WriteLine("6. Удалить мероприятие");
                    Console.WriteLine("7. Просмотр всех бронирований");
                }
                Console.WriteLine("0. Выход");
                Console.Write("Выберите действие: ");

                switch (Console.ReadLine())
                {
                    case "1":
                        ViewEvents();
                        break;
                    case "2":
                        BookEvent(currentUser);
                        break;
                    case "3":
                        CancelBooking(currentUser);
                        break;
                    case "4":
                        if (currentUser.Role == "Admin") AddEvent();
                        break;
                    case "5":
                        if (currentUser.Role == "Admin") EditEvent();
                        break;
                    case "6":
                        if (currentUser.Role == "Admin") DeleteEvent();
                        break;
                    case "7":
                        if (currentUser.Role == "Admin") ViewAllBookings();
                        break;
                    case "0":
                        exit = true;
                        break;
                    default:
                        Console.WriteLine("Неверный выбор. Попробуйте снова.");
                        break;
                }
            }
        }

        static void ViewEvents()
        {
            Console.WriteLine("\nСписок мероприятий:");
            foreach (var e in events)
            {
                Console.WriteLine($"ID: {e.ID}, Название: {e.Title}, Дата: {e.Date.ToShortDateString()}, Место: {e.Location}");
            }
        }

        static void BookEvent(User user)
        {
            Console.Write("Введите ID мероприятия: ");
            if (int.TryParse(Console.ReadLine(), out int eventId))
            {
                var selectedEvent = events.FirstOrDefault(e => e.ID == eventId);
                if (selectedEvent != null)
                {
                    bookings.Add(new Booking
                    {
                        ID = bookingCounter++,
                        User = user,
                        Event = selectedEvent,
                        Status = "Active"
                    });
                    Console.WriteLine("Мероприятие успешно забронировано!");
                }
                else
                {
                    Console.WriteLine("Мероприятие не найдено.");
                }
            }
            else
            {
                Console.WriteLine("Неверный ID.");
            }
        }

        static void CancelBooking(User user)
        {
            Console.WriteLine("\nВаши бронирования:");
            var userBookings = bookings.Where(b => b.User.ID == user.ID && b.Status == "Active").ToList();

            if (!userBookings.Any())
            {
                Console.WriteLine("У вас нет активных бронирований.");
                return;
            }

            foreach (var b in userBookings)
            {
                Console.WriteLine($"ID бронирования: {b.ID}, Мероприятие: {b.Event.Title}, Статус: {b.Status}");
            }

            Console.Write("Введите ID бронирования для отмены: ");
            if (int.TryParse(Console.ReadLine(), out int bookingId))
            {
                var booking = userBookings.FirstOrDefault(b => b.ID == bookingId);
                if (booking != null)
                {
                    booking.Status = "Cancelled";
                    Console.WriteLine("Бронирование успешно отменено.");
                }
                else
                {
                    Console.WriteLine("Бронирование не найдено.");
                }
            }
            else
            {
                Console.WriteLine("Неверный ID.");
            }
        }

        static void AddEvent()
        {
            Console.Write("Введите название мероприятия: ");
            string title = Console.ReadLine();

            Console.Write("Введите дату мероприятия (гггг-мм-дд): ");
            if (DateTime.TryParse(Console.ReadLine(), out DateTime date))
            {
                Console.Write("Введите место проведения: ");
                string location = Console.ReadLine();

                events.Add(new Event { ID = events.Count + 1, Title = title, Date = date, Location = location });
                Console.WriteLine("Мероприятие успешно добавлено!");
            }
            else
            {
                Console.WriteLine("Неверный формат даты.");
            }
        }

        static void EditEvent()
        {
            Console.Write("Введите ID мероприятия для редактирования: ");
            if (int.TryParse(Console.ReadLine(), out int eventId))
            {
                var selectedEvent = events.FirstOrDefault(e => e.ID == eventId);
                if (selectedEvent != null)
                {
                    Console.Write("Введите новое название мероприятия: ");
                    selectedEvent.Title = Console.ReadLine();

                    Console.Write("Введите новую дату мероприятия (гггг-мм-дд): ");
                    if (DateTime.TryParse(Console.ReadLine(), out DateTime newDate))
                    {
                        selectedEvent.Date = newDate;
                        Console.Write("Введите новое место проведения: ");
                        selectedEvent.Location = Console.ReadLine();

                        Console.WriteLine("Мероприятие успешно обновлено!");
                    }
                    else
                    {
                        Console.WriteLine("Неверный формат даты.");
                    }
                }
                else
                {
                    Console.WriteLine("Мероприятие не найдено.");
                }
            }
            else
            {
                Console.WriteLine("Неверный ID.");
            }
        }

        static void DeleteEvent()
        {
            Console.Write("Введите ID мероприятия для удаления: ");
            if (int.TryParse(Console.ReadLine(), out int eventId))
            {
                var selectedEvent = events.FirstOrDefault(e => e.ID == eventId);
                if (selectedEvent != null)
                {
                    events.Remove(selectedEvent);
                    Console.WriteLine("Мероприятие успешно удалено!");
                }
                else
                {
                    Console.WriteLine("Мероприятие не найдено.");
                }
            }
            else
            {
                Console.WriteLine("Неверный ID.");
            }
        }

        static void ViewAllBookings()
        {
            Console.WriteLine("\nВсе бронирования:");
            foreach (var b in bookings)
            {
                Console.WriteLine($"ID бронирования: {b.ID}, Пользователь: {b.User.Name}, Мероприятие: {b.Event.Title}, Статус: {b.Status}");
            }
        }

        static void SeedData()
        {
            events.Add(new Event { ID = 1, Title = "Конференция по ИТ", Date = DateTime.Now.AddDays(7), Location = "Алматы" });
            events.Add(new Event { ID = 2, Title = "Выставка искусства", Date = DateTime.Now.AddDays(14), Location = "Астана" });
            events.Add(new Event { ID = 3, Title = "Музыкальный фестиваль", Date = DateTime.Now.AddDays(21), Location = "Шымкент" });

            users.Add(new User { ID = 1, Name = "Алина", Role = "Guest" });
            users.Add(new User { ID = 2, Name = "Данияр", Role = "User" });
            users.Add(new User { ID = 3, Name = "Админ", Role = "Admin" });
        }
    }
}
